#!/bin/bash

##
## Author : Zhangwei
## Contact: w-zhang16@mails.tsinghua.edu.cn
## Date   : 2019.06.11
##
## This program is designed to check the requirement of the cfDNA analysis pipeline.
## The requirement will be installed if not found.
##


set -bu

origin_path=$(pwd)
cd "$(dirname "$0")"
cpath=$(pwd)
echo "                                                                             "
echo "Entering cfDNA pipeline path: "$cpath""
echo "                                                                             "

## python
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting Python environment......"
echo "                                                                             "
python --version > /dev/null 2>&1
flag_exist=$?
if [ $flag_exist -eq 0 ]; then
	python --version
	python_path=$(which python)
	echo "                                                                             "
	echo "Your python path is "$python_path
	echo "                                                                             "
else
	echo "Python is not found!"
	echo "Please download and install anaconda."
	echo "Please add anaconda path to your ~./bashrc or ~/.bash_profile."
	exit 1
fi

# Test python version
ver=$(python -V 2>&1 | sed 's/.* \([0-9]\).\([0-9]\).*/\1\2/')
if [ $ver -lt "30" ]; then
	echo "Your python version < 3.0, please using python3."
	exit 1
else
	echo "Your python satisfy the requirement!"
fi
echo "                                                                             "
echo "<<==========================================================================="


## conda
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting conda environment......"
echo "                                                                             "
conda info > /dev/null 2>&1
flag_exist=$?
if [ $flag_exist -eq 0 ]; then
	conda info
	conda_path=$(which conda)
	echo "                                                                             "
	echo "Your conda path is "$conda_path
else
	echo "Conda is not found!"
	echo "Please download and install anaconda."
	echo "Please add anaconda to your ~./bashrc or ~/.bash_profile."
	exit 1
fi
echo "                                                                             "
echo "<<==========================================================================="


## Fastqc
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting fastqc......"
echo "                                                                             "
fastqc --version > /dev/null 2>&1
fastqc_flag=$?
if [ $fastqc_flag -eq 0 ]; then
	fastqc --version
	fastqc_path=$(which fastqc)
	echo "                                                                             "
	echo "Your fastqc path is "$fastqc_path
else
	echo "fastqc is not found in your PATH!"
fi
echo "                                                                             "
echo "<<==========================================================================="


## samtools
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting samtools......"
echo "                                                                             "
samtools --version > /dev/null 2>&1
samtools_flag=$?
if [ $samtools_flag -eq 0 ]; then
	samtools --version
	samtools_path=$(which samtools)
	echo "                                                                             "
	echo "Your samtools path is "$samtools_path
else
	echo "Samtools is not found in your PATH!"
fi
echo "                                                                             "
echo "<<==========================================================================="


## bedtools
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting bedtools......"
echo "                                                                             "
bedtools --version > /dev/null 2>&1
bedtools_flag=$?
if [ $bedtools_flag -eq 0 ]; then
	bedtools --version
	bedtools_path=$(which bedtools)
	echo "                                                                             "
	echo "Your bedtools path is "$bedtools_path
else
	echo "Bedtools is not found in your PATH!"
fi
echo "                                                                             "
echo "<<==========================================================================="


## AdapterRemoval
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting AdapterRemoval......"
echo "                                                                             "
AdapterRemoval --version > /dev/null 2>&1
adaremoval_flag=$?
if [ $adaremoval_flag -eq 0 ]; then
	AdapterRemoval --version
	AdapterRemoval_path=$(which AdapterRemoval)
	echo "                                                                             "
	echo "Your AdapterRemoval path is "$AdapterRemoval_path
else
	echo "AdapterRemoval is not found in your PATH!"
fi
echo "                                                                             "
echo "<<==========================================================================="


## Bowtie2
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting Bowtie2......"
echo "                                                                             "
bowtie2 --version > /dev/null 2>&1
bowtie_flag=$?
if [ $bowtie_flag -eq 0 ]; then
	bowtie2 --version
	bowtie2_path=$(which bowtie2)
	echo "                                                                             "
	echo "Your bowtie2 path is "$bowtie2_path
else
	echo "bowtie2 is not found in your PATH!"
fi
echo "                                                                             "
echo "<<==========================================================================="


## Bismark
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting bismark......"
echo "                                                                             "
bismark --version > /dev/null 2>&1
bismark_flag=$?
if [ $bismark_flag -eq 0 ]; then
	bismark --version
	bismark_path=$(which bismark)
	echo "                                                                             "
	echo "Your bismark path is "$bismark_path
else
	echo "bismark is not found in your PATH!"
fi
echo "                                                                             "
echo "<<==========================================================================="


## Picard
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting picard......"
echo "                                                                             "
picard MarkDuplicates --version > /dev/null 2>&1
picard_flag=$?
if [ $picard_flag -eq 1 ]; then
	picard MarkDuplicates --version
	picard_path=$(which picard)
	echo "                                                                             "
	echo "Your picard path is "$picard_path
else
	echo "picard is not found in your PATH!"
fi
echo "                                                                             "
echo "<<==========================================================================="

## hmmcopy utils
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting hmmcopy_utils......"
echo "                                                                             "
mapCounter -h > /dev/null 2>&1
hmmcopy_flag=$?
if [ $hmmcopy_flag -eq 0 ]; then
	echo "Hmmcopy utils has been detected!"
	mapCounter_path=$(which mapCounter)
	gcCounter_path=$(which gcCounter)
	readCounter_path=$(which readCounter)
	echo "                                                                             "
	echo "Your mapCounter path is "$mapCounter_path
	echo "Your gcCounter path is "$gcCounter_path
	echo "Your readCounter path is "$readCounter_path
else
	echo "Hmmcopy utils is not found in your PATH!"
fi
echo "                                                                             "
echo "<<==========================================================================="


## Python package: pysam, numpy, os, sys, collections, 
echo "===========================================================================>>"
echo "                                                                             "
echo "Detecting python package......"
echo "                                                                             "
if python -c 'import pkgutil; exit(not pkgutil.find_loader("numpy"))'; then
	echo 'Package numpy exist!'
	numpy_flag=0
else
	echo 'Package numpy not exist!'
	numpy_flag=1
fi

if python -c 'import pkgutil; exit(not pkgutil.find_loader("matplotlib"))'; then
	echo 'Package matplotlib exist!'
	matplotlib_flag=0
else
	echo 'Package matplotlib not exist!'
	matplotlib_flag=1
fi

if python -c 'import pkgutil; exit(not pkgutil.find_loader("pysam"))'; then
	echo 'Package pysam exist!'
	pysam_flag=0
else
	echo 'Package pysam not exist!'
	pysam_flag=1
fi

if python -c 'import pkgutil; exit(not pkgutil.find_loader("pybedtools"))'; then
	echo 'Package pybedtools exist!'
	pybedtools_flag=0
else
	echo 'Package pybedtools not exist!'
	pybedtools_flag=1
fi

if python -c 'import pkgutil; exit(not pkgutil.find_loader("yattag"))'; then
	echo 'Package yattag exist!'
	yattag_flag=0
else
	echo 'Package yattag not exist!'
	yattag_flag=1
fi

# scipy will also be installed
if python -c 'import pkgutil; exit(not pkgutil.find_loader("statsmodels"))'; then
	echo 'Package statsmodels exist!'
	statsmodels_flag=0
else
	echo 'Package statsmodels not exist!'
	statsmodels_flag=1
fi

echo "                                                                             "
echo "<<==========================================================================="


## installation
echo "===========================================================================>>"
echo "                                                                             "
condaforge_list=""
if [ $yattag_flag -ne 0 ]; then
	condaforge_list=$condaforge_list" yattag"
fi

dranew_list=""
if [ $hmmcopy_flag -ne 0 ]; then
	dranew_list=$dranew_list" hmmcopy_utils"
fi

anaconda_list=""
if [ $numpy_flag -ne 0 ]; then
	anaconda_list=$anaconda_list" numpy"
fi
if [ $matplotlib_flag -ne 0 ]; then
	anaconda_list=$anaconda_list" matplotlib"
fi
if [ $statsmodels_flag -ne 0 ]; then
	anaconda_list=$anaconda_list" statsmodels"
fi

bioconda_list=""
if [ $fastqc_flag -ne 0 ]; then
	bioconda_list=$bioconda_list" fastqc"
fi
if [ $samtools_flag -ne 0 ]; then
	bioconda_list=$bioconda_list" samtools"
fi
if [ $bedtools_flag -ne 0 ]; then
	bioconda_list=$bioconda_list" bedtools"
fi
if [ $adaremoval_flag -ne 0 ]; then
	bioconda_list=$bioconda_list" adapterremoval"
fi
if [ $bowtie_flag -ne 0 ]; then
	bioconda_list=$bioconda_list" bowtie2"
fi
if [ $bismark_flag -ne 0 ]; then
	bioconda_list=$bioconda_list" bismark"
fi
if [ $picard_flag -ne 1 ]; then
	bioconda_list=$bioconda_list" picard"
fi
if [ $pysam_flag -ne 0 ]; then
	bioconda_list=$bioconda_list" pysam"
fi
if [ $pybedtools_flag -ne 0 ]; then
	bioconda_list=$bioconda_list" pybedtools"
fi

read -p "Do you want to install dependencies (y or n): " flag_input
if [ "$flag_input" = "n" ]; then
	echo "Dependencies is not available, exit now!"
	exit 1
elif [ "$flag_input" = "y" ]; then
	if [ "$anaconda_list" != "" ]; then
		echo "Now, installing anaconda dependencies......"
		conda install -y -c anaconda $anaconda_list 2>&1
		flag_install=$?
		if [ $flag_install -eq 0 ]; then
			echo "Anaconda dependencies installation complete!"
		else
			echo "Anaconda dependencies installation failed, exit now."
			exit 1
		fi
	fi

	if [ "$bioconda_list" != "" ]; then
		echo "Now, installing bioconda dependencies......"
		conda install -y -c bioconda $bioconda_list 2>&1
		flag_install=$?
		if [ $flag_install -eq 0 ]; then
			echo "Bioconda dependencies installation complete!"
		else
			echo "Bioconda dependencies installation failed, exit now."
			exit 1
		fi
	fi
	
	if [ "$condaforge_list" != "" ]; then
		echo "Now, installing conda-forge dependencies......"
		conda install -y -c conda-forge $condaforge_list 2>&1
		flag_install=$?
		if [ $flag_install -eq 0 ]; then
			echo "conda-forge dependencies installation complete!"
		else
			echo "conda-forge dependencies installation failed, exit now."
			exit 1
		fi
	fi

	if [ "$dranew_list" != "" ]; then
		echo "Now, installing dranew dependencies......"
		conda install -y -c dranew $dranew_list 2>&1
		flag_install=$?
		if [ $flag_install -eq 0 ]; then
			echo "dranew dependencies installation complete!"
		else
			echo "dranew dependencies installation failed, exit now."
			exit 1
		fi
	fi
	
	echo "===========================================================================>>"
	echo "                                                                             "
	fastqc --version
	fastqc_path=$(which fastqc)
	echo "                                                                             "
	echo "Your fastqc path is "$fastqc_path
	echo "                                                                             "
	echo "<<==========================================================================="
	
	echo "===========================================================================>>"
	echo "                                                                             "
	samtools --version
	samtools_path=$(which samtools)
	echo "                                                                             "
	echo "Your samtools path is "$samtools_path
	echo "                                                                             "
	echo "<<==========================================================================="
	
	echo "===========================================================================>>"
	echo "                                                                             "
	bedtools --version
	bedtools_path=$(which bedtools)
	echo "                                                                             "
	echo "Your bedtools path is "$bedtools_path
	echo "                                                                             "
	echo "<<==========================================================================="
	
	echo "===========================================================================>>"
	echo "                                                                             "
	AdapterRemoval --version
	AdapterRemoval_path=$(which AdapterRemoval)
	echo "                                                                             "
	echo "Your AdapterRemoval path is "$AdapterRemoval_path
	echo "                                                                             "
	echo "<<==========================================================================="
	
	echo "===========================================================================>>"
	echo "                                                                             "
	bowtie2 --version
	bowtie2_path=$(which bowtie2)
	echo "                                                                             "
	echo "Your bowtie2 path is "$bowtie2_path
	echo "                                                                             "
	echo "<<==========================================================================="
	
	echo "===========================================================================>>"
	echo "                                                                             "
	bismark --version
	bismark_path=$(which bismark)
	echo "                                                                             "
	echo "Your bismark path is "$bismark_path
	echo "                                                                             "
	echo "<<==========================================================================="
	
	echo "===========================================================================>>"
	echo "                                                                             "
	picard MarkDuplicates --version
	picard_path=$(which picard)
	echo "                                                                             "
	echo "Your picard path is "$picard_path
	echo "                                                                             "
	echo "<<==========================================================================="

	echo "===========================================================================>>"
	echo "                                                                             "
	mapCounter_path=$(which mapCounter)
	gcCounter_path=$(which gcCounter)
	readCounter_path=$(which readCounter)
	echo "Hmmcopy utils paths are as follows."
	echo "                                                                             "
	echo "Your mapCounter path is "$mapCounter_path
	echo "Your gcCounter path is "$gcCounter_path
	echo "Your readCounter path is "$readCounter_path
	echo "                                                                             "
	echo "<<==========================================================================="
else
	echo "Input must be y or n!"
	exit 1
fi
echo "                                                                             "
echo "<<==========================================================================="


## dependencies check


## final information
echo "===========================================================================>>"
echo "                                                                             "
echo "The environment configuration is done!"
echo "Return original path."
cd $origin_path
echo "                                                                             "
echo "<<==========================================================================="





